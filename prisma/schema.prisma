generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(63)
  email      String   @db.VarChar(225)
  password   String   @db.VarChar(127)
  birthAt   DateTime? @db.Date
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  @@map("users")
}

model City {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200) @unique
  description   String?  @db.Text()
  geolocation   String?  @db.VarChar(20)
  youtube       String?  @db.VarChar(255)
  state         String?  @db.VarChar(255)
  photo         String?  @db.VarChar(60)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  beaches Beach[]
  restaurants Restaurant[]
  stores Store[]
  accommodatios Accommodation[]
  tours Tour[]
  photos        Photo[]  @relation("CityPhotos")
  @@map("cities")
}

model Beach {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200) @unique
  geolocation   String   @db.VarChar(200)
  youtube       String?  @db.VarChar(200)
  description   String?  @db.Text()
  directions    String?  @db.Text()
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  street        String?  @db.VarChar(200)
  neighborhood  String?  @db.VarChar(200)
  number        String?  @db.VarChar(10)
  additionalAddress String?  @db.Text()
  zipeCode String?       @db.VarChar(25)
  city     City?         @relation(fields: [cityId], references: [id])
  cityId    Int?
  photos        Photo[]  @relation("BeachPhotos")
  @@map("beaches")
}

model RestaurantType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  restaurants   RestaurantToRestaurantType[]
  @@map("restaurant_types")
}

model Restaurant {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  description   String?  @db.Text()
  directions    String?  @db.Text()
  geolocation   String?  @db.VarChar(200)
  youtube       String?  @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  street        String?  @db.VarChar(200)
  neighborhood  String?  @db.VarChar(200)
  number        String?  @db.VarChar(10)
  additionalAddress String?  @db.Text()
  zipeCode String?       @db.VarChar(25)
  city     City?         @relation(fields: [cityId], references: [id])
  cityId    Int?
  phone  String?  @db.VarChar(50)
  photo  String?  @db.VarChar(50)
  instagram  String?  @db.VarChar(100)
  openingHours  String?  @db.VarChar(256)
  website  String?  @db.VarChar(255)
  photos        Photo[]  @relation("RestaurantPhotos")
  restaurantTypes RestaurantToRestaurantType[]
  restaurantToServiceType RestaurantToServiceType[]
@@map("restaurants")

}

model RestaurantToRestaurantType {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  restaurantType RestaurantType @relation(fields: [restaurantTypeId], references: [id])
  restaurantTypeId Int
  @@id([restaurantId, restaurantTypeId])
  @@map("restaurant_to_restaurant_types")
}

model AccommodationType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  accommodations Accommodation[]
  @@map("accommodation_types")
}

model ServiceType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  @@map("service_types")
}

model RestaurantServiceType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  restaurants   RestaurantToServiceType[]
  @@map("restaurant_service_types")
}

model RestaurantToServiceType {
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  restaurantServiceType RestaurantServiceType @relation(fields: [restaurantServiceTypeId], references: [id])
  restaurantServiceTypeId Int
  @@id([restaurantId, restaurantServiceTypeId])
  @@map("restaurant_to_service_types")
}

model Accommodation {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  description   String?  @db.Text()
  directions    String?  @db.Text()
  geolocation   String?  @db.VarChar(200)
  youtube       String?  @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  street        String?  @db.VarChar(200)
  neighborhood  String?  @db.VarChar(200)
  number        String?  @db.VarChar(10)
  additionalAddress String?  @db.Text()
  zipeCode String?       @db.VarChar(25)
  city     City?         @relation(fields: [cityId], references: [id])
  cityId    Int?
  phone  String?  @db.VarChar(50)
  photo  String?  @db.VarChar(50)
  instagram  String?  @db.VarChar(100)
  openingHours  String?  @db.VarChar(256)
  photos        Photo[]  @relation("AccommodationPhotos")
  website  String?  @db.VarChar(255)
  AccommodationTypeId    Int?
  accommodationType     AccommodationType?         @relation(fields: [AccommodationTypeId], references: [id])
@@map("accommodations")

}

model Photo {
  id           Int        @id @default(autoincrement())
  url          String     @db.VarChar(255)
  city   City? @relation("CityPhotos", fields: [cityId], references: [id])
  restaurant   Restaurant? @relation("RestaurantPhotos", fields: [restaurantId], references: [id])
  accommodation   Accommodation? @relation("AccommodationPhotos", fields: [accomodationId], references: [id])
  beach   Beach? @relation("BeachPhotos", fields: [beachId], references: [id])
  restaurantId Int?
  accomodationId Int?
  beachId Int?
  cityId Int?
  tour      Tour?   @relation("TourPhotos", fields: [tourId], references: [id])
  tourId    Int?
  @@map("photos")
}

model TourType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  tours   TourToTourType[]
  @@map("tour_types")
}

model Tour {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(200)
  description String?    @db.Text()
  duration    Int        @db.Int()
  price       Float      @db.Float()
  startDate   DateTime   @db.Timestamp(0)
  endDate     DateTime?  @db.Timestamp(0)
  status      Boolean    @default(true)
  created_at   DateTime   @default(now()) @db.Timestamp(0)
  updated_at   DateTime   @default(now()) @db.Timestamp(0)
  photos      Photo[]    @relation("TourPhotos")
  cityId  Int?
  city    City?   @relation(fields: [cityId], references: [id])
  tourToTourPackages TourToTourPackage[]
  tourToTourTypes TourToTourType[]
  @@map("tours")
}

model TourPackage {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(200)
  description String?    @db.Text()
  status      Boolean    @default(true)
  created_at   DateTime   @default(now()) @db.Timestamp(0)
  updated_at   DateTime   @default(now()) @db.Timestamp(0)
  tours   TourToTourPackage[]
  @@map("tour_packages")
}

model TourToTourPackage {
  tourId       Int
  tourPackageId Int

  tour         Tour         @relation(fields: [tourId], references: [id], onDelete: Cascade, map: "fk_tour_to_tour_package_tour")
  tourPackage  TourPackage  @relation(fields: [tourPackageId], references: [id], onDelete: Cascade, map: "fk_tour_to_tour_package_tour_package")

  @@id([tourId, tourPackageId])
  @@map("tour_to_tour_package")
}
model TourToTourType {
  tourId       Int
  tourTypeId Int

  tour         Tour         @relation(fields: [tourId], references: [id], onDelete: Cascade, map: "fk_tour_to_tour_type")
  tourType  TourType  @relation(fields: [tourTypeId], references: [id], onDelete: Cascade, map: "fk_tour_to_tour_type_tour_")

  @@id([tourId, tourTypeId])
  @@map("tour_to_tour_type")
}

model StoreType {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  stores   Store[]  
  @@map("store_types")
}


model Store {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(200)
  description   String?  @db.Text()
  directions    String?  @db.Text()
  geolocation   String?  @db.VarChar(200)
  youtube       String?  @db.VarChar(200)
  status        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  street        String?  @db.VarChar(200)
  neighborhood  String?  @db.VarChar(200)
  number        String?  @db.VarChar(10)
  additionalAddress String?  @db.Text()
  zipeCode String?       @db.VarChar(25)
  city     City?         @relation(fields: [cityId], references: [id])
  cityId    Int?
  storeType     StoreType?         @relation(fields: [storeTypeId], references: [id])
  storeTypeId    Int?
  phone  String?  @db.VarChar(50)
  photo  String?  @db.VarChar(50)
  instagram  String?  @db.VarChar(100)
  openingHours  String?  @db.VarChar(256)
  website  String?  @db.VarChar(255)
@@map("stores")

}
